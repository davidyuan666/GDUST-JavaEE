<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd"
    >

  
    <!-- Enable component scanning for automatic bean detection自动扫描注解 -->
    <context:component-scan base-package="edu.gust"></context:component-scan>


    <!-- 将指定类配置给Spring，让Spring创建HelloSpring对象的实例 -->
    <bean id="helloBean" class="edu.gust.beans.Hello">
        <!--为userName属性赋值-->
        <property name="userName" value="张三"></property>
    </bean>

    <bean id="user1Bean" class="edu.gust.pojo.User1">
        <constructor-arg name="id" value="1">
        </constructor-arg>
        <constructor-arg name="name" value="张三">
        </constructor-arg>
        <constructor-arg name="password" 	value="123"></constructor-arg>
    </bean>

    <bean id="user2Bean" class="edu.gust.pojo.User2">
        <property name="id" value="2"></property>
        <property name="name" value="李四"></property>
        <property name="password" value="456"></property>
    </bean>

    <bean id="userDaoBean" 	class="edu.gust.dao.impl.UserDao"></bean>


    <bean id="userServiceBean" class="edu.gust.service.impl.UserService">
        <property name="userDao" ref="userDaoBean"></property>
    </bean>


<!--     <bean id="bean1" class="edu.gust.beans.Bean1"></bean> -->

<!--     <bean id="bean1" class="edu.gust.beans.Bean1" scope="singleton"></bean> -->

    <bean id="bean1" class="edu.gust.beans.Bean1" scope="prototype"></bean>


    <bean id="bean2" class="edu.gust.beans.Bean2Factory" factory-method="createBean"></bean>

    <!-- 配置工厂 -->
    <bean id="Bean3Factory" class="edu.gust.beans.Bean3Factory"></bean>
    <!-- 使用factory-bean属性指向配置的实例工厂-->  
    <bean id="bean3" factory-bean="Bean3Factory" factory-method="createBean"></bean>


    <!-- 注册Bean -->
    <bean name="userDao5" class="edu.gust.dao.impl.UserDao5"/>
    <bean name="xmlAdvice" class="edu.gust.aop.XmlAdvice"/>


    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* edu.gust.dao.impl.UserDao5.*(..))"/>
        <aop:aspect ref ="xmlAdvice">
            <aop:before method="before" pointcut-ref="pointcut"/>
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut"/>
            <aop:around method="around" pointcut-ref="pointcut"/>
            <aop:after-throwing method="afterException" pointcut-ref="pointcut"/>
            <aop:after method="after" pointcut-ref="pointcut"/>
        </aop:aspect>
    </aop:config>


    <!-- 注册Bean -->
    <bean name="userDao5_Anno" class="edu.gust.dao.impl.UserDao5"/>
    <bean name="AnnoAdvice" class="edu.gust.aop.AnnoAdvice"/>
    <!-- 开启@aspectj的自动代理支持 -->
    <aop:aspectj-autoproxy/>



    <!-- spring jdbc -->
    <!-- 1.配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <!-- Update URL to include SSL settings -->
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=UTC&amp;useSSL=false&amp;allowPublicKeyRetrieval=true"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <!-- 2.配置JDBC模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--3.配置注入类-->
    <bean id="accountDao" class="edu.gust.dao.impl.AccountDao">
        <!-- 将jdbcTemplate注入到accountDao实例中 -->
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>


    <!-- 4.事务管理器，依赖于数据源 -->
    <bean id="transactionManager" class= "org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 5.编写通知：对事务进行增强(通知),需要编写对切入点和具体执行事务细节 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- name：*表示任意方法名称 -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 6.编写aop，让spring自动对目标生成代理，需要使用AspectJ的表达式 -->
    <aop:config>
        <!-- 切入点 -->
        <!--<aop:pointcut expression="execution(* com.itheima.demo01_xml.dao.impl.AccountDaoImpl.*(..))" id="txPointCut"/>-->
        <aop:pointcut expression="execution(* edu.gust.dao.impl.AccountDao.*(..))" id="txPointCut"/>
        <!-- 切面：将切入点与通知整合 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>













</beans>